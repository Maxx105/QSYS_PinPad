-- Pin Pad plugin
-- by Maxx Sanner
-- April 2022

-- Information block for the plugin
PluginInfo = {
  Name = "My Plugins~Pin Pad",
  Version = "1.0",
  BuildVersion = "1.1.0.3",
  Id = "6b98903a-c411-4bc2-83cb-1acc00bd3f60",
  Author = "Maxx Sanner",
  Description = "A basic pin pad plugin"  
}

-- Define the color of the plugin object in the design
function GetColor(props)
  return { 102, 102, 102 }
end

-- The name that will initially display when dragged into a design
function GetPrettyName(props)
  return "Pin Pad \nv" .. PluginInfo.Version
end

-- Optional function used if plugin has multiple pages
PageNames = { "PinPad" }  --List the pages within the plugin
function GetPages(props)
  local pages = {}
  for ix,name in ipairs(PageNames) do
    table.insert(pages, {name = PageNames[ix]})
  end
  return pages
end

-- Optional function to define model if plugin supports more than one model
function GetModel(props)
  local model = {}
 return model
end

-- Define User configurable Properties of the plugin
function GetProperties()
  local props = {}
  table.insert(props, {
    Name = "Debug Print",
    Type = "enum",
    Choices = {"None", "Tx/Rx", "Tx", "Rx", "Function Calls", "All"},
    Value = "None"
  })
  return props
end

-- Optional function to define pins on the plugin that are not connected to a Control
function GetPins(props)
  local pins = {}
  return pins
end

-- Optional function to update available properties when properties are altered by the user
function RectifyProperties(props)
  if props.plugin_show_debug.Value == false then 
    props["Debug Print"].IsHidden = true 
  end
  return props
end

-- Optional function to define components used within the plugin
function GetComponents(props)
  local components = {}
  return components
end

-- Optional function to define wiring of components used within the plugin
function GetWiring(props)
  local wiring = {}
  return wiring
end

-- Defines the Controls used within the plugin
function GetControls(props)
  local ctrls = {}
  -- Buttons 
  table.insert(ctrls, {
    Name             = "Numbers",
    ControlType      = "Button",
    ButtonType       = "Trigger",
    Count            = 12,
    UserPin          = true,
    PinStyle         = "Both"
  })
  table.insert(ctrls, {
    Name             = "Clear",
    ControlType      = "Button",
    ButtonType       = "Trigger",
    Count            = 1,
    UserPin          = true,
    PinStyle         = "Both",
    Icon             = "X"
  })
  table.insert(ctrls, {
    Name             = "Backspace",
    ControlType      = "Button",
    ButtonType       = "Trigger",
    Count            = 1,
    UserPin          = true,
    PinStyle         = "Both",
    Icon             = "Arrow Left"
  })
  
  -- Text
  table.insert(ctrls, {
    Name             = "Pin",
    ControlType      = "Text",
    Count            = 1,
    UserPin          = true,
    PinStyle         = "Both"
  })
  return ctrls
end

--Layout of controls and graphics for the plugin UI to display
function GetControlLayout(props)
  local layout = {}
  local graphics = {}
  local CurrentPage = PageNames[props["page_index"].Value]
  local pinPadChars = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "*", "0", "#"}
  
  -- Starting coordinates of top left pin pad button.
  local ColOne = 44
  local RowOne = 74
  
  -- Space between colums and rows on pin pad.
  local ColSpacing = 42
  local RowSpacing = 32
  
  function PinPadPositions()
    local PosTbl = {}
    for i = 1, 4 do 
      for j = 1, 3 do 
        table.insert(PosTbl, {ColOne + ColSpacing*(j-1), RowOne + RowSpacing*(i-1)})
      end
    end
    return PosTbl
  end
  
  if CurrentPage == "PinPad" then
    -- Graphics
    table.insert(graphics,{
      Type             = "GroupBox",
      Fill             = {228,228,228},
      StrokeWidth      = 0,
      ZOrder           = -100,
      Position         = {0,0},
      Size             = {216,215}
    })
    table.insert(graphics,{
      Type             = "Header",
      Text             = "Q-SYS Pin Pad",
      HTextAlign       = "Center",
      Font             = "Roboto",
      FontSize         = 20,
      Position         = {6,8},
      Size             = {204,25}
    })
  
    -- Controls layout
    layout["Pin"] = {
      PrettyName       = "Pin", 
      Style            = "Text", 
      Position         = {12,43}, 
      Size             = {192,16}, 
      ZOrder           = -99,
      FontSize         = 10
    }
    layout["Backspace"] = {
      PrettyName       = "Backspace", 
      Style            = "Button", 
      Position         = {156,43}, 
      Size             = {24,16}, 
      Margin           = 2,
      Color            = {255,255,255}, 
      UnlinkOffColor   = true, 
      OffColor         = {124,124,124}
    }
    layout["Clear"] = {
      PrettyName       = "Clear", 
      Style            = "Button", 
      Position         = {180,43}, 
      Size             = {24,16}, 
      Margin           = 2,
      Color            = {255,255,255}, 
      UnlinkOffColor   = true, 
      OffColor         = {124,124,124}
    }
  
    for i, v in ipairs(pinPadChars) do
      layout["Numbers "..i] = {
        PrettyName     = "Digits~"..v, 
        Style          = "Button", 
        Legend         = v, 
        Position       = PinPadPositions()[i], 
        Size           = {40,30}, 
        Color          = {255,255,255}, 
        UnlinkOffColor = true, 
        OffColor       = {124,124,124}, 
        FontSize       = 14
      }
    end
  
  end
  return layout, graphics
end

--Start event based logic
if Controls then
  local Numbers   = Controls.Numbers
  local Backspace = Controls.Backspace
  local Clear     = Controls.Clear
  local Pin       = Controls.Pin
  Digits = {"1","2","3","4","5","6","7","8","9","*","0","#"}
  
  function DoClear()
    Pin.String = ""
  end
  
  function DoBackspace()
    Pin.String = string.sub(Pin.String, 1, -2)
  end
  
  for i, v in ipairs(Digits) do
    Numbers[i].EventHandler = function()
      Pin.String = Pin.String..v
    end
  end
  Clear.EventHandler = DoClear
  Backspace.EventHandler = DoBackspace
end
